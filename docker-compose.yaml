version: '3.8'

volumes:
  auth-data:
    name: auth-data
    driver: local
  tickets-data:
    name: tickets-data
    driver: local
  orders-data:
    name: orders-data
    driver: local
  payments-data:
    name: payments-data
    driver: local

networks:
  public:
    name: public
  private:
    name: private
  auth:
    name: auth
  tickets:
    name: tickets
  orders:
    name: orders
  payments:
    name: payments
  expiration:
    name: expiration

services:

  ### FRONTEND ###

  web:
    image: docker.io/giammarcoboscaro/ticketing-client
    hostname: web
    container_name: web
    ports:
      - 3000:3000
    environment:
      - BASE_URL=http://gboscaro-udemy-ticketing.duckdns.org
    networks:
      - private
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://gboscaro-udemy-ticketing.duckdns.org"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    depends_on:
      auth:
        condition: service_healthy
      tickets:
        condition: service_healthy
      orders:
        condition: service_healthy
      expiration:
        condition: service_healthy
      payments:
        condition: service_healthy

  ### AUTHENTICATION ###
  
  auth:
    image: docker.io/giammarcoboscaro/ticketing-auth
    hostname: auth
    container_name: auth
    ports:
      - 3001:3000
    env_file:
      - .env
    environment:
      - MONGO_URI=mongodb://auth-mongo:27017/auth
    networks:
      - auth
      - private
    depends_on:
      auth-mongo:
        condition: service_healthy           
      nats:
        condition: service_started 
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "localhost:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  auth-mongo:
    image: mongo
    hostname: auth-mongo
    container_name: auth-mongo
    volumes:
      - auth-data:/data/db
    networks:
      - auth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/auth --quiet
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 5s

  ### TICKETS ###
  
  tickets:
    image: docker.io/giammarcoboscaro/ticketing-tickets
    hostname: tickets
    container_name: tickets
    ports:
      - 3002:3000
    env_file:
      - .env
    environment:
      - NATS_CLIENT_ID=tickets
      - NATS_URL=http://nats:4222
      - NATS_CLUSTER_ID=ticketing
      - MONGO_URI=mongodb://tickets-mongo:27017/tickets
    networks:
      - private
      - tickets
    depends_on:
      tickets-mongo:
        condition: service_healthy           
      nats:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "localhost:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  tickets-mongo:
    image: mongo
    hostname: tickets-mongo
    container_name: tickets-mongo
    volumes:
      - tickets-data:/data/db
    networks:
      - tickets
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/tickets --quiet
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 5s

  ### ORDERS ###
  
  orders:
    image: docker.io/giammarcoboscaro/ticketing-orders
    hostname: orders
    container_name: orders
    ports:
      - 3003:3000
    env_file:
      - .env
    environment:
      - NATS_CLIENT_ID=orders
      - NATS_URL=http://nats:4222
      - NATS_CLUSTER_ID=ticketing
      - MONGO_URI=mongodb://orders-mongo:27017/orders
    networks:
      - private
      - orders
    depends_on:
      orders-mongo:
        condition: service_healthy           
      nats:
        condition: service_started 
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "localhost:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  orders-mongo:
    image: mongo
    hostname: orders-mongo
    container_name: orders-mongo
    volumes:
      - orders-data:/data/db
    networks:
      - orders
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/orders --quiet
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 5s

  ### PAYMENTS ###
  
  payments:
    image: docker.io/giammarcoboscaro/ticketing-payments
    hostname: payments
    container_name: payments
    ports:
      - 3004:3000
    env_file:
      - .env
    environment:
      - NATS_CLIENT_ID=payments
      - NATS_URL=http://nats:4222
      - NATS_CLUSTER_ID=ticketing
      - MONGO_URI=mongodb://payments-mongo:27017/payments
    networks:
      - private
      - payments
    depends_on:
      payments-mongo:
        condition: service_healthy           
      nats:
        condition: service_started 
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "localhost:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  payments-mongo:
    image: mongo
    hostname: payments-mongo
    container_name: payments-mongo
    volumes:
      - payments-data:/data/db
    networks:
      - payments
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/payments --quiet
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 5s

  ### EXPIRATION ###
  
  expiration:
    image: docker.io/giammarcoboscaro/ticketing-expiration
    hostname: expiration
    container_name: expiration
    ports:
      - 3005:3000
    environment:
      - NATS_CLIENT_ID=expiration
      - NATS_URL=http://nats:4222
      - NATS_CLUSTER_ID=ticketing
      - REDIS_HOST=expiration-redis
    networks:
      - private
      - expiration
    depends_on:
      expiration-redis:
        condition: service_healthy           
      nats:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "localhost:3000/api/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  expiration-redis:
    image: redis
    hostname: expiration-redis
    container_name: expiration-redis
    networks:
      - expiration
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 2s

  ### NATS ###

  nats:
    image: nats-streaming:0.25.6
    hostname: nats
    container_name: nats
    command: 
      [
        '-p', '4222',
        '-m', '8222',
        '-hbi', '5s',
        '-hbt', '5s',
        '-hbf', '2',
        '-SD',
        '-cid', 'ticketing',
      ]
    ports:
      - 4222:4222
      - 8222:8222
    networks:
      - private
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "http://localhost:8222/varz"]
    #   interval: 2s
    #   timeout: 5s
    #   retries: 10
    #   start_period: 5s

  ### INFRA ###

  traefik:
    image: traefik:v2.11.3
    hostname: traefik
    container_name: traefik
    ports:
      - 80:80
      - 8080:8080
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
    networks:
      - public
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s

  caddy:
    image: caddy:2.8.4-alpine
    hostname: caddy
    container_name: caddy
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=public"
      - "traefik.http.routers.ticketing.entrypoints=web"
      - "traefik.http.routers.ticketing.rule=Host(`gboscaro-udemy-ticketing.duckdns.org`) && PathPrefix(`/`)"
    networks:
      - public
      - private
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/metrics"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s

  duckdns:
    image: ghcr.io/linuxserver/duckdns:version-72e081dd
    hostname: duckdns
    container_name: duckdns
    env_file:
      - .env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Rome
      - SUBDOMAINS=gboscaro-udemy-ticketing.duckdns.org
      - LOG_FILE=true
    volumes:
      - ./logs/duckdns:/config
    networks:
      - private
